git init
<directory> Create empty Git repo in specified directory. Run with no
arguments to initialize the current directory as a git repository.
git commit
--amend Replace the last commit with the staged changes and last commit
combined. Use with nothing staged to edit the last commit's message.
git clone <repo> Clone repo located at ‹repo> onto local machine. Original repo can be
located on the local filesystem or on a remote machine via HTTP or SSH.
git rebase ‹base> Rebase the current branch onto <base>. ‹base> can be a commit ID,
branch name, a tag, or a relative reference to HEAD. git config
user. name <name> Define author name to be used for all commits in current repo. Devs
commonly use -global flag to set config options for current user.
git reflog
Show a log of changes to the local repository's HEAD.
Add -relative-date flag to show date info or --all to show all refs.
git add
‹directory>
Stage all changes in ‹directory> for the next commit.
Replace ‹directory> with a < file> to change a specific file.
GIT BRANCHES
git commit -m
"«message>" Commit the staged snapshot, but instead of launching
a text editor, use <message> as the commit message.
git branch List all of the branches in your repo. Add a ‹branch> argument to
create a new branch with the name <branch>.
git status
List which files are staged, unstaged, and untracked. git checkout -b
<branch>
Create and check out a new branch named <branch>.
Drop the -b flag to checkout an existing branch.
git log
Display the entire commit history using the default format.
For customization see additional options.
git merge <branch>
Merge ‹branch> into the current branch.
git diff Show unstaged changes between your index and
working directory.



#adding some text to commit to see changes by the commit.:):):)
